/*
 * MainFrame.cpp
 *
 *  Created on: Jul 16, 2013
 *      Author: oek
 */

#include "MainFrame.h"

MainFrame::MainFrame(uint16_t nIdeas, uint16_t nDrops) {

	engine_ = new Engine(this);
	audio_storage_ = new AudioStorage();
	worker_ = new Worker(this);
	interpreter_ = new Interpreter(this);

	ideas_.reserve(nIdeas);
	for (uint16_t i = 0; i < nIdeas; ++i) {
		ideas_.push_back(Idea());
		ideas_free_.push(&ideas_[i]);
	}

	drops_.reserve(nIdeas);
	for (uint16_t i = 0; i < nDrops; ++i) {
		drops_.push_back(Drop(this, GetBufferMaxLength()));
		drops_free_.push(&drops_[i]);
	}

}

MainFrame::~MainFrame() {
	// TODO
}

Idea*
MainFrame::GetIdea(Tag association) {
	Idea* idea = ideas_in_use_[association];
	if (idea == 0) {
		idea = ideas_free_.pop();
		ideas_in_use_[association] = idea;
	}
	return idea;
}

float* MainFrame::GetAudioData(Tag material) {
	return audio_storage_->GetData(material);
}

float* MainFrame::GetAudioSize(Tag material) {
	return audio_storage_->GetSize(material);
}

void MainFrame::LoadAudioMaterial(Tag material, char* path) {
	audio_storage_->LoadFile(material, path);
}

	void MainFrame::Onset(Tag idea) {


	}

	Idea* GetOnset(uint16_t index); // get next oncoming onset
	Drop* PopFreeDrop(); // pop next free drop
	void ScheduleDrop(Drop* drop); // add drop to Engines run queue

	uint32_t GetBufferMaxLength();



